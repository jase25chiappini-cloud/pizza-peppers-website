// src/lib/transformMenu.js
// Normalize API -> { categories: [{ name, ref, items: [{ id, name, description, sizes|null, prices:{} }] }] }

export function transformMenu(api) {
  const categories = Array.isArray(api?.categories) ? api.categories : [];
  const products   = Array.isArray(api?.products) ? api.products : [];

  console.log('[menu][transform] input counts: categories=', categories.length, 'products=', products.length);

  // Join keys
  const categoryKey = (c) => c?.ref ?? c?.id ?? c?._id ?? c?.name ?? null;
  const productCatKey = (p) => p?.category_ref ?? p?.categoryRef ?? p?.category ?? p?.categoryId ?? null;
  console.log('[menu][transform] keys: category.ref=ref|id|_id|name product.categoryRef=category_ref|categoryRef|category|categoryId');

  // Bucket products by category
  const bucket = new Map();
  for (const p of products) {
    const cref = productCatKey(p);
    if (!cref) continue;
    if (!bucket.has(cref)) bucket.set(cref, []);

    const skus = Array.isArray(p.skus) ? p.skus : [];
    const toNumber = (v) => {
      if (typeof v === 'number') return v;
      if (typeof v === 'string') {
        const n = Number(v.replace(/^\s*\$\s*/, '').trim());
        return Number.isFinite(n) ? n : null;
      }
      return null;
    };

    let sizes = null;
    let prices = {};
    if (skus.length > 1) {
      sizes = skus.map(s => s.name);
      for (const s of skus) prices[s.name] = toNumber(s.price);
    } else if (skus.length === 1) {
      prices = { Default: toNumber(skus[0].price) };
    }

    bucket.get(cref).push({
      id: p.id,
      name: p.name,
      description: p.description || '',
      sizes,
      prices,
      raw: p,
    });
  }

  const out = {
    categories: categories.map(c => {
      const ref = categoryKey(c);
      return { name: c.name, ref, items: bucket.get(ref) ?? [] };
    }).filter(c => c.items.length > 0),
  };

  console.log('[menu][transform] output categories=', out.categories.length);
  return out;
}

